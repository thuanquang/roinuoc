// ===== GAME PROGRESS MANAGER =====
class GameProgressManager {
    constructor() {
        this.progress = this.loadProgress();
        this.currentChapter = null;
        this.init();
    }

    init() {
        this.renderChapters();
        this.updateProgressBar();
        this.updateStats();
        this.bindEvents();
        
        // Check if returning from game
        this.checkReturnFromGame();
    }

    // ===== PROGRESS MANAGEMENT =====
    loadProgress() {
        // Force reset progress on every load for debugging
        console.log('üîÑ Loading progress...');
        
        const defaultProgress = {
            completedChapters: [],
            unlockedChapters: [1], // Ch∆∞∆°ng 1 lu√¥n m·ªü
            highScore: 0,
            totalScore: 0,
            achievements: []
        };
        
        const saved = localStorage.getItem('waterPuppet_progress');
        
        if (saved) {
            try {
                const progress = JSON.parse(saved);
                // Merge v·ªõi default ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·ªß properties
                console.log('üìä Loaded existing progress:', progress);
                return { ...defaultProgress, ...progress };
            } catch (e) {
                console.warn('‚ùå Invalid progress data, using defaults');
                return defaultProgress;
            }
        }
        
        console.log('üìä Using default progress');
        return defaultProgress;
    }

    saveProgress() {
        localStorage.setItem('waterPuppet_progress', JSON.stringify(this.progress));
    }

    completeChapter(chapterNum, score) {
        if (!this.progress.completedChapters.includes(chapterNum)) {
            this.progress.completedChapters.push(chapterNum);
        }
        
        // Unlock next chapter
        const nextChapter = chapterNum + 1;
        if (nextChapter <= 7 && !this.progress.unlockedChapters.includes(nextChapter)) {
            this.progress.unlockedChapters.push(nextChapter);
        }
        
        // Update scores
        if (score > this.progress.highScore) {
            this.progress.highScore = score;
        }
        this.progress.totalScore += score;
        
        this.saveProgress();
        this.updateProgressBar();
        this.updateStats();
        this.renderChapters();
    }

    isChapterUnlocked(chapterNum) {
        return this.progress.unlockedChapters.includes(chapterNum);
    }

    isChapterCompleted(chapterNum) {
        return this.progress.completedChapters.includes(chapterNum);
    }

    // ===== UI RENDERING =====
    renderChapters() {
        const grid = document.getElementById('chapters-grid');
        if (!grid) {
            console.error('chapters-grid not found!');
            return;
        }
        
        grid.innerHTML = '';
        
        console.log('=== RENDERING CHAPTERS ===');
        console.log('Total chapters to render:', Object.keys(chapters).length);
        
        let renderedCount = 0;
        
        // Render all available chapters (7 total)
        const totalChapters = Object.keys(chapters).length;
        console.log(`üìä Total chapters in data: ${totalChapters}`);
        
        // Sort chapter numbers to ensure proper order
        const sortedChapterNums = Object.keys(chapters)
            .map(num => parseInt(num))
            .sort((a, b) => a - b);
            
        console.log('üìã Chapter numbers found:', sortedChapterNums);
        
        sortedChapterNums.forEach(num => {
            const chapter = chapters[num];
            
            if (!chapter) {
                console.warn(`Chapter ${num} is undefined!`);
                return;
            }
            
            const isUnlocked = this.isChapterUnlocked(num);
            const isCompleted = this.isChapterCompleted(num);
            
            console.log(`üé≠ Rendering Chapter ${num}: ${chapter.title} (Unlocked: ${isUnlocked}, Completed: ${isCompleted})`);
            
            const card = this.createChapterCard(num, chapter, isUnlocked, isCompleted);
            grid.appendChild(card);
            renderedCount++;
        });
        
        console.log(`üìä Actually rendered: ${renderedCount} chapters out of ${totalChapters} total`);
        
        console.log(`Successfully rendered ${renderedCount} chapters`);
        
        // Add debug attribute to grid
        grid.setAttribute('data-chapter-count', renderedCount);
        
        // Debug grid layout
        setTimeout(() => {
            const actualRendered = grid.children.length;
            const expectedCount = Object.keys(chapters).length;
            
            console.log(`Grid children count: ${actualRendered}`);
            console.log(`Expected count: ${expectedCount}`);
            
            if (actualRendered !== expectedCount) {
                console.error(`‚ùå CHAPTER DISPLAY MISMATCH!`);
                console.error(`Expected: ${expectedCount} chapters`);
                console.error(`Actually rendered: ${actualRendered} chapters`);
                
                // Check if any chapters are hidden by CSS
                const hiddenCards = Array.from(grid.children).filter(card => {
                    const styles = window.getComputedStyle(card);
                    return styles.display === 'none' || styles.visibility === 'hidden';
                });
                
                if (hiddenCards.length > 0) {
                    console.warn(`Found ${hiddenCards.length} hidden chapter cards`);
                }
                
                // Check grid layout
                const gridStyles = window.getComputedStyle(grid);
                console.log('Grid template columns:', gridStyles.gridTemplateColumns);
                console.log('Grid gap:', gridStyles.gap);
            } else {
                console.log(`‚úÖ All ${expectedCount} chapters rendered correctly`);
            }
        }, 100);
    }

    createChapterCard(chapterNum, chapter, isUnlocked, isCompleted) {
        const card = document.createElement('div');
        card.className = `chapter-card ${isCompleted ? 'completed' : (isUnlocked ? 'available' : 'locked')}`;
        card.dataset.chapter = chapterNum;

        const chapterIcons = {
            1: 'üé≠', 2: 'üèÆ', 3: 'üíï', 4: 'üê≤', 5: 'üî•',
            6: 'üéä', 7: 'üíé', 8: 'üëë', 9: '‚ö°', 10: 'üèÜ'
        };

        const descriptions = {
            1: 'H·ªçc c√°c ƒë·ªông t√°c c∆° b·∫£n c·ªßa m√∫a r·ªëi n∆∞·ªõc',
            2: 'Tr√¨nh di·ªÖn trong kh√¥ng kh√≠ l·ªÖ h·ªôi s√¥i ƒë·ªông',
            3: 'K·ªÉ c√¢u chuy·ªán t√¨nh y√™u qua c√°c ƒë·ªông t√°c nh·∫π nh√†ng',
            4: 'Chi·∫øn ƒë·∫•u v·ªõi th·ªßy qu√°i trong h·ªì n∆∞·ªõc',
            5: 'ƒêi·ªÅu khi·ªÉn r·ªìng huy·ªÅn tho·∫°i phun n∆∞·ªõc thi√™ng',
            6: 'M·ª´ng T·∫øt v·ªõi nh·ªØng ƒëi·ªáu m√∫a truy·ªÅn th·ªëng',
            7: 'Kh√°m ph√° kho b√°u d∆∞·ªõi ƒë√°y h·ªì s√¢u',
            8: 'T√°i hi·ªán truy·ªÅn thuy·∫øt L·∫°c Long Qu√¢n - √Çu C∆°',
            9: 'Th·ª≠ th√°ch t·ªëc ƒë·ªô v√† ph·∫£n x·∫° c·ª±c h·∫°n',
            10: 'Tr·ªü th√†nh cao th·ªß m√∫a r·ªëi ch√¢n ch√≠nh'
        };

        card.innerHTML = `
            <div class="chapter-header">
                <div class="chapter-number">${chapterNum}</div>
                <div class="chapter-title">
                    ${chapterIcons[chapterNum]} ${chapter.title}
                </div>
            </div>
            <div class="chapter-description">
                ${descriptions[chapterNum]}
            </div>
            <div class="chapter-meta">
                <div class="difficulty-stars">
                    ${'‚òÖ'.repeat(chapter.difficulty)}${'‚òÜ'.repeat(7 - chapter.difficulty)}
                </div>
                <div class="chapter-progress">
                    ${isCompleted ? 'Ho√†n th√†nh' : (isUnlocked ? 'S·∫µn s√†ng' : 'Ch∆∞a m·ªü kh√≥a')}
                </div>
            </div>
        `;

        if (isUnlocked) {
            card.addEventListener('click', (e) => {
                console.log(`üéØ Chapter ${chapterNum} card clicked`);
                e.preventDefault();
                e.stopPropagation();
                this.showChapterModal(chapterNum, chapter);
            });
            
            // Add keyboard support
            card.setAttribute('tabindex', '0');
            card.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    console.log(`‚å®Ô∏è Chapter ${chapterNum} activated via keyboard`);
                    e.preventDefault();
                    this.showChapterModal(chapterNum, chapter);
                }
            });
        } else {
            card.style.opacity = '0.5';
            card.style.cursor = 'not-allowed';
        }

        return card;
    }

    updateProgressBar() {
        const completed = this.progress.completedChapters.length;
        const total = Object.keys(chapters).length;
        const percentage = (completed / total) * 100;
        
        document.getElementById('total-progress').style.width = `${percentage}%`;
        document.getElementById('progress-text').textContent = `${completed}/${total}`;
    }

    updateStats() {
        document.getElementById('high-score').textContent = this.progress.highScore.toLocaleString();
        document.getElementById('completed-chapters').textContent = this.progress.completedChapters.length;
    }

    // ===== MODAL HANDLING =====
    showChapterModal(chapterNum, chapter) {
        console.log('üé≠ Showing modal for chapter:', chapterNum);
        this.currentChapter = chapterNum;
        const modal = document.getElementById('chapter-modal');
        
        if (!modal) {
            console.error('‚ùå Modal element not found!');
            return;
        }
        
        // Populate modal content
        const modalTitle = document.getElementById('modal-title');
        const modalDifficulty = document.getElementById('modal-difficulty');
        const modalDescription = document.getElementById('modal-description');
        const modalSequences = document.getElementById('modal-sequences');
        const modalStats = document.getElementById('modal-stats');
        
        if (modalTitle) modalTitle.textContent = chapter.title;
        if (modalDifficulty) {
            modalDifficulty.innerHTML = '‚òÖ'.repeat(chapter.difficulty) + '‚òÜ'.repeat(7 - chapter.difficulty);
        }
        
        // Description
        const descriptions = {
            1: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi th·∫ø gi·ªõi m√∫a r·ªëi n∆∞·ªõc! B∆∞·ªõc ƒë·∫ßu ti√™n kh√°m ph√° di s·∫£n vƒÉn h√≥a 1000+ nƒÉm tu·ªïi.',
            2: 'H·ªçc t·ª´ Ch√∫ T·ªÖu - nh√¢n v·∫≠t kinh ƒëi·ªÉn v√† ƒë√°ng y√™u nh·∫•t trong m√∫a r·ªëi n∆∞·ªõc Vi·ªát Nam.',
            3: 'Kh√°m ph√° truy·ªán c·ªï t√≠ch T·∫•m C√°m qua ngh·ªá thu·∫≠t m√∫a r·ªëi - b√†i h·ªçc v·ªÅ l√≤ng t·ªët v√† c√¥ng l√Ω.',
            4: 'Tr·∫£i nghi·ªám l·ªÖ h·ªôi m√πa g·∫∑t - ni·ªÅm vui sau m√πa m√†ng b·ªôi thu c·ªßa n√¥ng d√¢n Vi·ªát Nam.',
            5: 'G·∫∑p g·ª° R·ªìng Thi√™ng - bi·ªÉu t∆∞·ª£ng quy·ªÅn uy v√† ph∆∞·ªõc l√†nh trong t√¢m linh ng∆∞·ªùi Vi·ªát.',
            6: 'ƒê√≥n T·∫øt Nguy√™n ƒê√°n v·ªõi m√∫a s∆∞ t·ª≠, ph∆∞·ª£ng ho√†ng - xu√¢n v·ªÅ ƒë·∫ßy may m·∫Øn.',
            7: 'C√¢u chuy·ªán ng∆∞ d√¢n v√† bi·ªÉn c·∫£ - s·ª± d≈©ng c·∫£m tr∆∞·ªõc thi√™n nhi√™n bao la.',
            8: 'S·ª≠ thi L·∫°c Long Qu√¢n - √Çu C∆°: ngu·ªìn g·ªëc d√¢n t·ªôc con r·ªìng ch√°u ti√™n.',
            9: 'L·ªÖ h·ªôi ƒë√¨nh l√†ng - tinh th·∫ßn c·ªông ƒë·ªìng v√† t√¥n vinh t·ªï ti√™n c·ªßa ng∆∞·ªùi Vi·ªát.',
            10: 'Tr·ªü th√†nh ngh·ªá nh√¢n m√∫a r·ªëi - ho√†n th√†nh h√†nh tr√¨nh kh√°m ph√° vƒÉn h√≥a d√¢n t·ªôc.'
        };
        
        if (modalDescription) {
            modalDescription.textContent = descriptions[chapterNum];
        }
        
        // Sequences
        if (modalSequences) {
            modalSequences.innerHTML = `
                <h4>C√°c ƒë·ªông t√°c trong ch∆∞∆°ng:</h4>
                <ul class="sequence-list">
                    ${chapter.sequences.map(seq => 
                        `<li class="sequence-item">${seq.description} (${seq.keys})</li>`
                    ).join('')}
                </ul>
            `;
        }
        
        // Stats
        if (modalStats) {
            modalStats.innerHTML = `
                <div class="stat-box">
                    <span class="stat-value">${chapter.sequences.length}</span>
                    <span class="stat-label">ƒê·ªông t√°c</span>
                </div>
                <div class="stat-box">
                    <span class="stat-value">${chapter.difficulty}</span>
                    <span class="stat-label">ƒê·ªô kh√≥</span>
                </div>
            `;
        }
        
        // Show modal with delay to ensure DOM is updated
        setTimeout(() => {
            modal.classList.add('show');
            console.log('‚úÖ Modal shown for chapter:', chapterNum);
            
            // Focus the play button for accessibility
            const playButton = document.getElementById('modal-play');
            if (playButton) {
                playButton.focus();
            }
        }, 10);
    }

    hideChapterModal() {
        console.log('üö™ Hiding modal...');
        const modal = document.getElementById('chapter-modal');
        if (modal) {
            modal.classList.remove('show');
            // Don't clear currentChapter here as it might be needed for navigation
        }
    }

    startChapter() {
        console.log('üöÄ Start chapter clicked:', this.currentChapter);
        
        if (!this.currentChapter) {
            console.error('‚ùå No chapter selected');
            alert('L·ªói: Kh√¥ng c√≥ ch∆∞∆°ng n√†o ƒë∆∞·ª£c ch·ªçn!');
            return;
        }
        
        // Validate chapter exists
        if (!chapters[this.currentChapter]) {
            console.error('‚ùå Invalid chapter:', this.currentChapter);
            alert('L·ªói: Ch∆∞∆°ng kh√¥ng h·ª£p l·ªá!');
            return;
        }
        
        console.log('üíæ Saving chapter to localStorage:', this.currentChapter);
        
        // Clear any existing game data
        localStorage.removeItem('waterPuppet_gameCompleted');
        
        // Save current chapter to localStorage for game.html
        localStorage.setItem('waterPuppet_selectedChapter', this.currentChapter.toString());
        localStorage.setItem('waterPuppet_returnUrl', 'index.html');
        
        // Hide modal first
        this.hideChapterModal();
        
        // Show loading message
        const loadingDiv = document.createElement('div');
        loadingDiv.style.position = 'fixed';
        loadingDiv.style.top = '0';
        loadingDiv.style.left = '0';
        loadingDiv.style.width = '100%';
        loadingDiv.style.height = '100%';
        loadingDiv.style.background = 'rgba(0, 0, 0, 0.8)';
        loadingDiv.style.display = 'flex';
        loadingDiv.style.alignItems = 'center';
        loadingDiv.style.justifyContent = 'center';
        loadingDiv.style.zIndex = '10000';
        loadingDiv.style.color = 'white';
        loadingDiv.style.fontSize = '1.5rem';
        loadingDiv.innerHTML = `
            <div style="text-align: center;">
                <div>üé≠ ƒêang t·∫£i ch∆∞∆°ng ${this.currentChapter}...</div>
                <div style="font-size: 1rem; margin-top: 1rem;">${chapters[this.currentChapter].title}</div>
            </div>
        `;
        document.body.appendChild(loadingDiv);
        
        // Navigate to game with small delay to ensure everything is saved
        setTimeout(() => {
            console.log('üéÆ Navigating to game.html...');
            window.location.href = 'game.html';
        }, 500);
    }

    // ===== EVENT BINDING =====
    bindEvents() {
        console.log('üîß Setting up event listeners...');
        
        // Use event delegation for better reliability
        document.addEventListener('click', (e) => {
            // Handle modal close button
            if (e.target.id === 'modal-close') {
                console.log('‚ùå Modal close clicked via delegation');
                e.preventDefault();
                e.stopPropagation();
                this.hideChapterModal();
                return;
            }
            
            // Handle modal cancel button
            if (e.target.id === 'modal-cancel') {
                console.log('üö´ Modal cancel clicked via delegation');
                e.preventDefault();
                e.stopPropagation();
                this.hideChapterModal();
                return;
            }
            
            // Handle modal play button
            if (e.target.id === 'modal-play') {
                console.log('üéÆ Modal play clicked via delegation for chapter:', this.currentChapter);
                e.preventDefault();
                e.stopPropagation();
                this.startChapter();
                return;
            }
            
            // Handle modal overlay click (close modal)
            if (e.target.id === 'chapter-modal' && e.target.classList.contains('modal-overlay')) {
                console.log('üñ±Ô∏è Modal overlay clicked via delegation');
                this.hideChapterModal();
                return;
            }
        });

        // ESC key to close modal
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                console.log('‚å®Ô∏è ESC key pressed - closing modal');
                this.hideChapterModal();
            }
        });
        
        console.log('‚úÖ Event delegation set up successfully');
    }

    // ===== RETURN FROM GAME HANDLING =====
    checkReturnFromGame() {
        const returnedFromGame = localStorage.getItem('waterPuppet_gameCompleted');
        if (returnedFromGame) {
            const gameResult = JSON.parse(returnedFromGame);
            
            // Process game completion
            if (gameResult.completed) {
                this.completeChapter(gameResult.chapter, gameResult.score);
                
                // Show completion message
                setTimeout(() => {
                    this.showCompletionMessage(gameResult);
                }, 500);
            }
            
            // Clear the flag
            localStorage.removeItem('waterPuppet_gameCompleted');
        }
    }

    showCompletionMessage(result) {
        const message = document.createElement('div');
        message.className = 'completion-message';
        message.innerHTML = `
            <div class="completion-content">
                <h3>üéâ Ch√∫c m·ª´ng!</h3>
                <p>B·∫°n ƒë√£ ho√†n th√†nh <strong>${chapters[result.chapter].title}</strong></p>
                <p>ƒêi·ªÉm s·ªë: <strong>${result.score.toLocaleString()}</strong></p>
                <p>Combo t·ªëi ƒëa: <strong>${result.maxCombo}</strong></p>
                <button onclick="this.parentElement.parentElement.remove()">ƒê√≥ng</button>
            </div>
        `;
        
        message.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        `;
        
        message.querySelector('.completion-content').style.cssText = `
            background: linear-gradient(135deg, #b82323, #8b1a1a);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            border: 2px solid #E9E9A4;
            text-align: center;
            max-width: 400px;
        `;
        
        message.querySelector('button').style.cssText = `
            background: #E9E9A4;
            color: #b82323;
            border: none;
            padding: 0.5rem 1.5rem;
            border-radius: 20px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 1rem;
        `;
        
        document.body.appendChild(message);
    }
}

// ===== INITIALIZE =====
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM Content Loaded - Initializing Game Progress Manager...');
    window.gameProgress = new GameProgressManager();
    
    // Ensure events are bound after everything is ready
    setTimeout(() => {
        window.gameProgress.bindEvents();
    }, 50);
});

// ===== RESET MODAL FUNCTIONS =====
function showResetModal() {
    const modal = document.getElementById('reset-modal');
    if (modal) {
        modal.classList.add('show');
    }
}

function hideResetModal() {
    const modal = document.getElementById('reset-modal');
    if (modal) {
        modal.classList.remove('show');
    }
}

function confirmResetProgress() {
    console.log('üîÑ Resetting all game data...');
    
    // Clear all game data
    const keysToRemove = [
        'waterPuppet_progress',
        'waterPuppet_achievements', 
        'waterPuppet_highScores',
        'waterPuppet_unlockedStories',
        'waterPuppet_gameCompleted',
        'waterPuppet_selectedChapter',
        'waterPuppet_returnUrl'
    ];
    
    keysToRemove.forEach(key => {
        localStorage.removeItem(key);
        console.log('üóëÔ∏è Removed:', key);
    });
    
    console.log('‚úÖ All game data cleared!');
    hideResetModal();
    
    // Show success message and reload
    setTimeout(() => {
        alert('‚úÖ RESET TH√ÄNH C√îNG!\n\nT·∫•t c·∫£ ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c x√≥a. Trang s·∫Ω reload...');
        window.location.reload(true);
    }, 300);
}

// Expose functions globally
window.showResetModal = showResetModal;
window.hideResetModal = hideResetModal;
window.confirmResetProgress = confirmResetProgress;